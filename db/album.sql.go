// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: album.sql

package db

import (
	"context"
	"time"
)

const countAlbumsByUser = `-- name: CountAlbumsByUser :one
SELECT COUNT(*) FROM albums
WHERE user_id = $1
`

func (q *Queries) CountAlbumsByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAlbumsByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (
  user_id, title
) VALUES (
  $1, $2
)
RETURNING id, user_id, title, created_at, updated_at
`

type CreateAlbumParams struct {
	UserID int32
	Title  string
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum, arg.UserID, arg.Title)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM albums
WHERE id = $1
`

func (q *Queries) DeleteAlbum(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAlbum, id)
	return err
}

const getAlbum = `-- name: GetAlbum :one
SELECT a.id, a.user_id, a.title, a.created_at, a.updated_at, COUNT(p.*) AS num_photos
FROM albums a
  LEFT JOIN photos p on p.album_id = a.id
WHERE a.id = $1 
GROUP BY a.id
LIMIT 1
`

type GetAlbumRow struct {
	ID        int32
	UserID    int32
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
	NumPhotos int64
}

func (q *Queries) GetAlbum(ctx context.Context, id int32) (GetAlbumRow, error) {
	row := q.db.QueryRowContext(ctx, getAlbum, id)
	var i GetAlbumRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NumPhotos,
	)
	return i, err
}

const listAlbumsByUser = `-- name: ListAlbumsByUser :many
SELECT a.id, a.user_id, a.title, a.created_at, a.updated_at, COUNT(p.*) AS num_photos
FROM albums a
  LEFT JOIN photos p ON p.album_id = a.id
WHERE a.user_id = $1
GROUP BY a.id
LIMIT $2
OFFSET $3
`

type ListAlbumsByUserParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

type ListAlbumsByUserRow struct {
	ID        int32
	UserID    int32
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
	NumPhotos int64
}

func (q *Queries) ListAlbumsByUser(ctx context.Context, arg ListAlbumsByUserParams) ([]ListAlbumsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listAlbumsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAlbumsByUserRow
	for rows.Next() {
		var i ListAlbumsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NumPhotos,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlbum = `-- name: UpdateAlbum :exec
UPDATE albums
  SET user_id = $2,
  title = $3,
  updated_at = $4
WHERE id = $1
RETURNING id, user_id, title, created_at, updated_at
`

type UpdateAlbumParams struct {
	ID        int32
	UserID    int32
	Title     string
	UpdatedAt time.Time
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) error {
	_, err := q.db.ExecContext(ctx, updateAlbum,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.UpdatedAt,
	)
	return err
}
